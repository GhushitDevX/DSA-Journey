#include <iostream> // For input/output
using namespace std;

int main() {
    // ============================================
    // 1Ô∏è‚É£ What are Logical Operators?
    // ============================================
    /*
        üìå Definition:
        Logical operators let you combine, compare, or invert boolean values (true / false).

        ‚úÖ Common Logical Operators in C++:
        1. Logical AND (&&) ‚Üí true if BOTH operands are true
        2. Logical OR  (||) ‚Üí true if AT LEAST ONE operand is true
        3. Logical NOT (!)  ‚Üí inverts the truth value

        ‚ö†Ô∏è Key Notes:
        - Used in conditions: if, while, for loops, etc.
        - Non-boolean values are auto-converted:
              0 ‚Üí false
              non-zero ‚Üí true
    */

    cout << "=== Logical Operators Output ===" << endl;

    bool a = true, b = false; // Example boolean values

    // --------------------------------------------
    // AND Operator (&&)
    // --------------------------------------------
    cout << "AND (a && b): " << (a && b) << endl; // Output: 0
    /*
        a = true, b = false
        AND ‚Üí both must be true ‚Üí result = false
    */

    // --------------------------------------------
    // OR Operator (||)
    // --------------------------------------------
    cout << "OR (a || b): " << (a || b) << endl; // Output: 1
    /*
        a = true, b = false
        OR ‚Üí at least one must be true ‚Üí result = true
    */

    // --------------------------------------------
    // NOT Operator (!)
    // --------------------------------------------
    cout << "NOT (!a): " << (!a) << endl; // Output: 0
    /*
        a = true
        NOT ‚Üí invert ‚Üí result = false
    */

    cout << "NOT (!b): " << (!b) << endl; // Output: 1
    /*
        b = false
        NOT ‚Üí invert ‚Üí result = true
    */

    // ============================================
    // 2Ô∏è‚É£ Combining Logical Operators
    // ============================================
    cout << "a && !b: " << (a && !b) << endl;       // true && true ‚Üí true
    cout << "a || !b: " << (a || !b) << endl;       // true || true ‚Üí true
    cout << "!a || b: " << (!a || b) << endl;       // false || false ‚Üí false
    cout << "!a && !b: " << (!a && !b) << endl;     // false && true ‚Üí false
    cout << "a && b || !b: " << (a && b || !b) << endl; // false || true ‚Üí true
    cout << "a || b && !a: " << (a || b && !a) << endl; // true || false ‚Üí true

    // ============================================
    // 3Ô∏è‚É£ Precedence & Short-Circuiting
    // ============================================
    /*
        Precedence (highest ‚Üí lowest):
        1. !   (NOT)
        2. &&  (AND)
        3. ||  (OR)

        Example: a || b && !a
        - Step 1: !a
        - Step 2: b && !a
        - Step 3: a || (result)

        ‚ö° Short-Circuiting:
        - AND (&&) ‚Üí stops early if the first operand is false
        - OR  (||) ‚Üí stops early if the first operand is true
    */

    // ============================================
    // 4Ô∏è‚É£ MEMORY TRICKS üß†
    // ============================================
    /*
        üîπ AND (&&) ‚Üí "All must Agree" ‚Üí if one is false, whole thing is false.
        üîπ OR  (||) ‚Üí "Only one Required" ‚Üí if one is true, whole thing is true.
        üîπ NOT (!)  ‚Üí "Flip it!" ‚Üí true ‚Üí false, false ‚Üí true.

        üéØ Shortcut to remember precedence:
        N ‚Üí A ‚Üí O   (NOT, AND, OR)
        Think: "No Apples Oranges" üçèüçä
    */

    return 0;
}
